import mlflow
from mlflow.tracking import MlflowClient
import yaml
import json
import os
from datetime import datetime

def load_params():
    with open("params.yaml", "r") as f:
        return yaml.safe_load(f)

def main():
    params = load_params()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ MLflow
    client = MlflowClient()
    
    try:
        # –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        experiment = client.get_experiment_by_name("NPV_Prediction_DVC")
        if not experiment:
            print("‚ùå –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–æ–π
            registry_info = {"error": "Experiment not found"}
            os.makedirs('registry', exist_ok=True)
            with open('registry/model_info.json', 'w') as f:
                json.dump(registry_info, f, indent=2)
            return
            
        runs = client.search_runs(experiment.experiment_id, order_by=["attributes.start_time DESC"])
        
        if runs:
            latest_run = runs[0]
            run_id = latest_run.info.run_id
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
            model_name = f"{params['model']['name']}_NPV"
            
            try:
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å
                client.get_registered_model(model_name)
                print(f"–ú–æ–¥–µ–ª—å {model_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                model_status = "existing"
            except:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
                client.create_registered_model(model_name)
                print(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å: {model_name}")
                model_status = "new"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
            model_version = client.create_model_version(
                name=model_name,
                source=f"mlruns/{experiment.experiment_id}/{run_id}/artifacts/model",
                run_id=run_id
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            registry_info = {
                "model_name": model_name,
                "model_version": model_version.version,
                "run_id": run_id,
                "status": model_status,
                "timestamp": datetime.now().isoformat()  # –ò–°–ü–†–ê–í–õ–ï–ù–û!
            }
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É registry –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs('registry', exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–∞–π–ª
            with open('registry/model_info.json', 'w') as f:
                json.dump(registry_info, f, indent=2)
            
            print(f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ MLflow Model Registry")
            print(f"üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ registry/model_info.json")
            
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø—É—Å–∫–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–æ–π
            os.makedirs('registry', exist_ok=True)
            with open('registry/model_info.json', 'w') as f:
                json.dump({"error": "No runs found"}, f, indent=2)
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
        os.makedirs('registry', exist_ok=True)
        with open('registry/model_info.json', 'w') as f:
            json.dump({"error": str(e)}, f, indent=2)

if __name__ == "__main__":
    main()