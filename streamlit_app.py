import streamlit as st
import requests
import pandas as pd
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="NPV Prediction App",
    page_icon="üìä",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üí∞ NPV Prediction App")
st.markdown("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ NPV –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∫–≤–∞–∂–∏–Ω—ã")

# URL –≤–∞—à–µ–≥–æ API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é localhost)
API_URL = st.sidebar.text_input(
    "URL API", 
    value="http://localhost:8000",
    help="–í–≤–µ–¥–∏—Ç–µ URL –≤–∞—à–µ–≥–æ FastAPI —Å–µ—Ä–≤–µ—Ä–∞"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API
def check_api_health():
    try:
        response = requests.get(f"{API_URL}/health", timeout=5)
        return response.status_code == 200
    except:
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
def get_prediction(data):
    try:
        response = requests.post(
            f"{API_URL}/predict",
            json=data,
            timeout=10
        )
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}"}
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
def get_model_info():
    try:
        response = requests.get(f"{API_URL}/model_info", timeout=5)
        if response.status_code == 200:
            return response.json()
        else:
            return None
    except:
        return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API
if st.sidebar.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API"):
    if check_api_health():
        st.sidebar.success("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        st.sidebar.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
st.header("üìù –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

col1, col2 = st.columns(2)

with col1:
    st.subheader("–ì–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    heff = st.number_input("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≤—ã—Å–æ—Ç–∞ (Heff)", min_value=0.0, value=10.0, step=0.1)
    perm = st.number_input("–ü—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å (Perm)", min_value=0.0, value=100.0, step=1.0)
    sg = st.slider("–ì–∞–∑–æ–Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å (Sg)", min_value=0.0, max_value=1.0, value=0.8, step=0.01)
    c5 = st.number_input("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ C5", min_value=0.0, value=0.5, step=0.1)

with col2:
    st.subheader("–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    l_hor = st.number_input("–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ (L_hor)", min_value=0.0, value=500.0, step=10.0)
    gs = st.selectbox("–¢–∏–ø –ø—Ä–æ–≤–æ–¥–∫–∏ —Å—Ç–≤–æ–ª–∞", ["S-TYPE", "U-TYPE", "VGS", "GS", "NGS"])
    temp = st.number_input("–¢–µ–º–ø –ø–∞–¥–µ–Ω–∏—è", min_value=0.0, value=20.0, step=0.1)
    grp = st.number_input("—Å—Ç–∞–¥–∏–π –ì–†–ü)", min_value=0, value=1, step=1)
    ngs = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–≤–æ–ª–æ–≤", min_value=0, value=2, step=1)

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
if st.button("üéØ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å NPV", type="primary"):
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API
    input_data = {
        "Heff": heff,
        "Perm": perm,
        "Sg": sg,
        "L_hor": l_hor,
        "GS": gs,
        "temp": temp,
        "C5": c5,
        "GRP": grp,
        "nGS": ngs
    }
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
    with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞..."):
        result = get_prediction(input_data)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if "predicted_NPV" in result:
        st.success(f"## –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π NPV: **{result['predicted_NPV']:,.2f}**")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        with st.expander("üìä –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞"):
            st.json(input_data)
            st.json(result)
    else:
        st.error(f"–û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
st.sidebar.header("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
model_info = get_model_info()
if model_info and "error" not in model_info:
    st.sidebar.write(f"**–¢–∏–ø –º–æ–¥–µ–ª–∏:** {model_info.get('model_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    st.sidebar.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:** {model_info.get('n_features', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    
    if "features" in model_info:
        with st.sidebar.expander("–°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"):
            for feature in model_info["features"]:
                st.write(f"‚Ä¢ {feature}")
else:
    st.sidebar.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

# –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
st.sidebar.header("üìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤")
if st.sidebar.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä 1"):
    st.experimental_set_query_params(example=1)
    st.rerun()

if st.sidebar.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä 2"):
    st.experimental_set_query_params(example=2)
    st.rerun()

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
with st.expander("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"):
    st.markdown("""
    1. **–ó–∞–ø—É—Å—Ç–∏—Ç–µ FastAPI —Å–µ—Ä–≤–µ—Ä** –Ω–∞ –ø–æ—Ä—Ç—É 8000
    2. **–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API –¥–æ—Å—Ç—É–ø–µ–Ω** (–∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
    3. **–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã** —Å–∫–≤–∞–∂–∏–Ω—ã
    4. **–ù–∞–∂–º–∏—Ç–µ '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å NPV'** –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    5. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã** –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    
    **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤–∞—à Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å API –∑–∞–ø—É—â–µ–Ω!
    """)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.caption("NPV Prediction App ‚Ä¢ Powered by FastAPI + Streamlit + XGBoost")