import streamlit as st
import requests
import pandas as pd
import json
import os
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="NPV Prediction App",
    page_icon="üìä",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üí∞ NPV Prediction App")
st.markdown("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ NPV –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∫–≤–∞–∂–∏–Ω—ã")

# URL –≤–∞—à–µ–≥–æ API (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏)
API_URL = st.sidebar.text_input(
    "URL API", 
    value=os.getenv('API_URL', 'http://localhost:8001'),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –¥–µ—Ñ–æ–ª—Ç–æ–º
    help="–í–≤–µ–¥–∏—Ç–µ URL –≤–∞—à–µ–≥–æ FastAPI —Å–µ—Ä–≤–µ—Ä–∞"
)

# MLflow URL –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
MLFLOW_URL = st.sidebar.text_input(
    "MLflow URL", 
    value=os.getenv('MLFLOW_URL', 'http://localhost:5000'),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –¥–µ—Ñ–æ–ª—Ç–æ–º
    help="–í–≤–µ–¥–∏—Ç–µ URL MLflow —Å–µ—Ä–≤–µ—Ä–∞"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API
def check_api_health():
    try:
        response = requests.get(f"{API_URL}/health", timeout=5)
        return response.status_code == 200
    except:
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
def get_prediction(data):
    try:
        response = requests.post(
            f"{API_URL}/predict",
            json=data,
            timeout=10
        )
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}"}
    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
def get_model_info():
    try:
        response = requests.get(f"{API_URL}/model_info", timeout=5)
        if response.status_code == 200:
            return response.json()
        else:
            return None
    except:
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∏–∑ DVC
def get_dvc_metrics():
    try:
        if os.path.exists('models/metrics.json'):
            with open('models/metrics.json', 'r') as f:
                return json.load(f)
        return None
    except:
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏
def get_model_params():
    try:
        if os.path.exists('params.yaml'):
            import yaml
            with open('params.yaml', 'r') as f:
                return yaml.safe_load(f)
        return None
    except:
        return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API
st.sidebar.header("üîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
if st.sidebar.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API"):
    if check_api_health():
        st.sidebar.success("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        st.sidebar.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
st.header("üìù –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

col1, col2 = st.columns(2)

with col1:
    st.subheader("–ì–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    heff = st.number_input("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≤—ã—Å–æ—Ç–∞ (Heff)", min_value=0.0, value=10.0, step=0.1, 
                          help="–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ø–ª–∞—Å—Ç–∞")
    perm = st.number_input("–ü—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å (Perm)", min_value=0.0, value=100.0, step=1.0,
                          help="–ü—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å –ø–æ—Ä–æ–¥—ã")
    sg = st.slider("–ì–∞–∑–æ–Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å (Sg)", min_value=0.0, max_value=1.0, value=0.8, step=0.01,
                  help="–î–æ–ª—è –≥–∞–∑–∞ –≤ –ø–ª–∞—Å—Ç–µ")
    c5 = st.number_input("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ C5+", min_value=0.0, value=0.5, step=0.1,
                        help="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç—è–∂–µ–ª—ã—Ö —É–≥–ª–µ–≤–æ–¥–æ—Ä–æ–¥–æ–≤")

with col2:
    st.subheader("–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    l_hor = st.number_input("–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ (L_hor)", min_value=0.0, value=500.0, step=10.0,
                           help="–î–ª–∏–Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞")
    gs = st.selectbox("–¢–∏–ø –ø—Ä–æ–≤–æ–¥–∫–∏ —Å—Ç–≤–æ–ª–∞", ["S-TYPE", "U-TYPE", "VGS", "GS", "NGS"],
                     help="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫–≤–∞–∂–∏–Ω—ã")
    temp = st.number_input("–¢–µ–º–ø –ø–∞–¥–µ–Ω–∏—è", min_value=0.0, value=20.0, step=0.1,
                          help="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ø–ª–∞—Å—Ç–µ")
    grp = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–¥–∏–π –ì–†–ü", min_value=0, value=1, step=1,
                         help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–¥–∏–π –≥–∏–¥—Ä–æ—Ä–∞–∑—Ä—ã–≤–∞ –ø–ª–∞—Å—Ç–∞")
    ngs = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–≤–æ–ª–æ–≤", min_value=0, value=2, step=1,
                         help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ç–≤–µ–π —Å–∫–≤–∞–∂–∏–Ω—ã")

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
if st.button("üéØ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å NPV", type="primary"):
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API
    input_data = {
        "Heff": heff,
        "Perm": perm,
        "Sg": sg,
        "L_hor": l_hor,
        "GS": gs,
        "temp": temp,
        "C5": c5,
        "GRP": grp,
        "nGS": ngs
    }
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
    with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞..."):
        result = get_prediction(input_data)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if "predicted_NPV" in result:
        # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        st.success(f"## –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π NPV: **${result['predicted_NPV']:,.2f}**")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("NPV", f"${result['predicted_NPV']:,.2f}")
        with col2:
            # –ü—Ä–∏–º–µ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏
            st.metric("–°—Ç–∞—Ç—É—Å", "‚úÖ –£—Å–ø–µ—à–Ω–æ")
        with col3:
            st.metric("–í—Ä–µ–º—è", datetime.now().strftime("%H:%M:%S"))
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        with st.expander("üìä –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞"):
            st.subheader("–í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            st.json(input_data)
            
            st.subheader("–û—Ç–≤–µ—Ç API")
            st.json(result)
            
            # –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π (–≤ —Å–µ—Å—Å–∏–∏)
            if 'prediction_history' not in st.session_state:
                st.session_state.prediction_history = []
            
            st.session_state.prediction_history.append({
                'timestamp': datetime.now().isoformat(),
                'input': input_data,
                'prediction': result['predicted_NPV']
            })
            
            st.subheader("–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
            if st.session_state.prediction_history:
                history_df = pd.DataFrame(st.session_state.prediction_history)
                st.dataframe(history_df)
    else:
        st.error(f"–û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
st.sidebar.header("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –∏–∑ API
model_info = get_model_info()
if model_info and "error" not in model_info:
    st.sidebar.success("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    st.sidebar.write(f"**–¢–∏–ø –º–æ–¥–µ–ª–∏:** {model_info.get('model_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    st.sidebar.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:** {model_info.get('n_features', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    
    if "features" in model_info:
        with st.sidebar.expander("–°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"):
            for feature in model_info["features"]:
                st.write(f"‚Ä¢ {feature}")
else:
    st.sidebar.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

# –ú–µ—Ç—Ä–∏–∫–∏ –∏–∑ DVC
dvc_metrics = get_dvc_metrics()
if dvc_metrics:
    with st.sidebar.expander("üìà –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏ (DVC)"):
        st.write(f"**R¬≤:** {dvc_metrics.get('r2', 'N/A'):.4f}")
        st.write(f"**MAE:** {dvc_metrics.get('mae', 'N/A'):.2f}")
        st.write(f"**MAPE:** {dvc_metrics.get('mape', 'N/A'):.2%}")
        st.write(f"**CV R¬≤:** {dvc_metrics.get('cv_mean', 'N/A'):.4f} ¬± {dvc_metrics.get('cv_std', 'N/A'):.4f}")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
model_params = get_model_params()
if model_params:
    with st.sidebar.expander("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏"):
        st.write(f"**–ê–ª–≥–æ—Ä–∏—Ç–º:** {model_params.get('model', {}).get('name', 'N/A')}")
        params = model_params.get('model', {}).get('hyperparameters', {})
        for key, value in params.items():
            st.write(f"**{key}:** {value}")

# –°—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
st.sidebar.header("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
if st.sidebar.button("üìà –û—Ç–∫—Ä—ã—Ç—å MLflow"):
    st.markdown(f'<a href="{MLFLOW_URL}" target="_blank">üìà –ü–µ—Ä–µ–π—Ç–∏ –∫ MLflow</a>', unsafe_allow_html=True)

if st.sidebar.button("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞–π–ø–ª–∞–π–Ω"):
    with st.sidebar:
        with st.spinner("–ó–∞–ø—É—Å–∫ DVC –ø–∞–π–ø–ª–∞–π–Ω–∞..."):
            import subprocess
            try:
                result = subprocess.run(['dvc', 'repro'], capture_output=True, text=True)
                if result.returncode == 0:
                    st.success("‚úÖ –ü–∞–π–ø–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                else:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

# –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
st.sidebar.header("üéØ –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤")

example_data = [
    {
        "name": "–ü—Ä–∏–º–µ—Ä 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–∫–≤–∞–∂–∏–Ω–∞",
        "data": {"Heff": 15.0, "Perm": 150.0, "Sg": 0.75, "L_hor": 600.0, 
                "GS": "S-TYPE", "temp": 25.0, "C5": 0.6, "GRP": 2, "nGS": 3}
    },
    {
        "name": "–ü—Ä–∏–º–µ—Ä 2: –í—ã—Å–æ–∫–æ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∞—è", 
        "data": {"Heff": 25.0, "Perm": 300.0, "Sg": 0.85, "L_hor": 800.0,
                "GS": "U-TYPE", "temp": 30.0, "C5": 0.7, "GRP": 3, "nGS": 4}
    }
]

# –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º session_state –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π
if 'load_example' not in st.session_state:
    st.session_state.load_example = None

for i, example in enumerate(example_data):
    if st.sidebar.button(example["name"]):
        st.session_state.load_example = example["data"]
        st.rerun()  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º app –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π

# –ï—Å–ª–∏ –ø—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
if st.session_state.load_example:
    heff = st.session_state.load_example["Heff"]
    perm = st.session_state.load_example["Perm"]
    sg = st.session_state.load_example["Sg"]
    l_hor = st.session_state.load_example["L_hor"]
    gs = st.session_state.load_example["GS"]
    temp = st.session_state.load_example["temp"]
    c5 = st.session_state.load_example["C5"]
    grp = st.session_state.load_example["GRP"]
    ngs = st.session_state.load_example["nGS"]
    st.session_state.load_example = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
with st.expander("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"):
    st.markdown("""
    ### üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
    
    1. **–ó–∞–ø—É—Å—Ç–∏—Ç–µ FastAPI —Å–µ—Ä–≤–µ—Ä**: `python app.py` (–ø–æ—Ä—Ç 8001)
    2. **–ó–∞–ø—É—Å—Ç–∏—Ç–µ MLflow**: `mlflow server --backend-store-uri file:mlruns --host localhost --port 5000`
    3. **–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã** —Å–∫–≤–∞–∂–∏–Ω—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã
    4. **–ù–∞–∂–º–∏—Ç–µ '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å NPV'** –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    
    ### üîß –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    
    - **DVC –ø–∞–π–ø–ª–∞–π–Ω**: `dvc repro` - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
    - **–ú–µ—Ç—Ä–∏–∫–∏**: `dvc metrics show` - –ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç—Ä–∏–∫
    - **–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã**: `dvc exp run` - –∑–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
    
    ### üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    
    - **MLflow**: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π
    - **DVC**: –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –º–µ—Ç—Ä–∏–∫
    - **FastAPI**: –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API –ø–æ `/docs`
    
    **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!
    """)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.caption(f"""
NPV Prediction App ‚Ä¢ Powered by FastAPI + Streamlit + XGBoost + DVC + MLflow
‚Ä¢ –í–µ—Ä—Å–∏—è: 2.0 ‚Ä¢ {datetime.now().year}
""")
